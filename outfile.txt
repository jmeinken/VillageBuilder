# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
#
# Also note: You'll have to insert the output of 'django-admin sqlcustom [app_label]'
# into your database.
from __future__ import unicode_literals

from django.db import models


class Alert(models.Model):
    alert_id = models.AutoField(primary_key=True)
    participant = models.ForeignKey('Participant')
    type = models.CharField(max_length=30)
    created_on = models.DateTimeField()
    viewed = models.IntegerField()
    viewed_on = models.DateTimeField()
    json = models.CharField(max_length=500, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'alert'


class Friendship(models.Model):
    person = models.ForeignKey('Person')
    friend = models.ForeignKey('Person')

    class Meta:
        managed = False
        db_table = 'friendship'
        unique_together = (('person_id', 'friend_id'),)


class Group(models.Model):
    group = models.ForeignKey('Member', primary_key=True)
    title = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'group'


class GroupMember(models.Model):
    person = models.ForeignKey('Person')
    group = models.ForeignKey(Group)
    watching_only = models.IntegerField(blank=True, null=True)
    approved = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'group_member'
        unique_together = (('person_id', 'group_id'),)


class Guest(models.Model):
    guest = models.ForeignKey('Participant', primary_key=True)
    code = models.CharField(max_length=60)
    first_name = models.CharField(max_length=30, blank=True, null=True)
    last_name = models.CharField(max_length=30, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'guest'


class GuestFriendship(models.Model):
    person = models.ForeignKey('Person')
    guest = models.ForeignKey(Guest)

    class Meta:
        managed = False
        db_table = 'guest_friendship'
        unique_together = (('person_id', 'guest_id'),)


class Member(models.Model):
    member = models.ForeignKey('Participant', primary_key=True)
    full_address = models.CharField(max_length=400)
    address1 = models.CharField(max_length=50, blank=True, null=True)
    address2 = models.CharField(max_length=50, blank=True, null=True)
    city = models.CharField(max_length=50, blank=True, null=True)
    state = models.CharField(max_length=2, blank=True, null=True)
    zip_code = models.CharField(max_length=10, blank=True, null=True)
    latitude = models.DecimalField(max_digits=10, decimal_places=7)
    longitude = models.DecimalField(max_digits=10, decimal_places=7)
    street = models.CharField(max_length=50, blank=True, null=True)
    neighborhood = models.CharField(max_length=50)
    phone_number = models.CharField(max_length=20, blank=True, null=True)
    phone_type = models.CharField(max_length=20, blank=True, null=True)
    share_email = models.IntegerField()
    share_address = models.IntegerField()
    share_phone = models.IntegerField()
    pic_large = models.CharField(max_length=100, blank=True, null=True)
    pic_small = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'member'


class Participant(models.Model):
    participant_id = models.AutoField(primary_key=True)
    user = models.ForeignKey('Users')
    participant_type = models.CharField(max_length=20, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'participant'


class Person(models.Model):
    person = models.ForeignKey(Member, primary_key=True)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'person'


class Users(models.Model):
    email = models.CharField(max_length=50)
    username = models.CharField(max_length=25, blank=True, null=True)
    password = models.CharField(max_length=60, blank=True, null=True)
    password_temp = models.CharField(max_length=60, blank=True, null=True)
    code = models.CharField(max_length=60, blank=True, null=True)
    active = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    remember_token = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'users'
